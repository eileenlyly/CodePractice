http://blog.csdn.net/zmazon/article/details/8262185

有6种位运算：
   &   与运算
   |   或运算
   ^   异或运算
   ~   非运算(求补)
  >>   右移运算
  <<   左移运算


1.获得int型最大值

int getMaxInt(){  
        return (1 << 31) - 1;//2147483647

int getMaxInt(){  
    return ~(1 << 31);//2147483647  
}  

int getMaxInt(){  
    return ((unsigned int) - 1) >> 1;//2147483647  
} 

2.获得int型最小值

int getMinInt(){  
    return 1 << 31;//-2147483648  
 }  

6.乘以/除以2的m次方

int mulTwoPower(int n,int m){//计算n*(2^m)  
    return n << m;  
}
int divTwoPower(int n,int m){//计算n/(2^m)  
    return n >> m;  
}

8.判断一个数的奇偶性

boolean isOddNumber(int n){  
    return (n & 1) == 1;  
} 
 
9.不用临时变量交换两个数（面试常考）

C语言版

void swap(int &a, int &b){
    a = a^b;
    b = a^b;
    a = a^b; 

10.取绝对值（某些机器上，效率比n>0  ?  n:-n 高）

int abs(int n){  
return (n ^ (n >> 31)) - (n >> 31);  
/* n>>31 取得n的符号，若n为正数，n>>31等于0，若n为负数，n>>31等于-1 
若n为正数 n^0=0,数不变，若n为负数有n^-1 需要计算n和-1的补码，然后进行异或运算， 
结果n变号并且为n的绝对值减1，再减去-1就是绝对值 */  
}  

11.取两个数的最大值（某些机器上，效率比a>b ? a:b高）

通用版
int max(int a,int b){  
    return b & ((a-b) >> 31) | a & (~(a-b) >> 31);  
    /*如果a>=b,(a-b)>>31为0，否则为-1*/ 


12.取两个数的最小值（某些机器上，效率比a>b ? b:a高）

通用版
int min(int a,int b){  
    return a & ((a-b) >> 31) | b & (~(a-b) >> 31);  
    /*如果a>=b,(a-b)>>31为0，否则为-1*/  
}   

13.判断符号是否相同
boolean isSameSign(int x, int y){ //有0的情况例外  
    return (x ^ y) >= 0; // true 表示 x和y有相同的符号， false表示x，y有相反的符号。  

15.判断一个数是不是2的幂

boolean isFactorialofTwo(int n){  
    return n > 0 ? (n & (n - 1)) == 0 : false;  
    /*如果是2的幂，n一定是100... n-1就是1111.... 
       所以做与运算结果为0*/  
}  

16.对2的n次方取余
int quyu(int m,int n){//n为2的次方  
    return m & (n - 1);  
    /*如果是2的幂，n一定是100... n-1就是1111.... 
     所以做与运算结果保留m在n范围的非0的位*/  

三个最基本对二进制位的操作

18.从低位到高位,取n的第m位
int getBit(int n, int m){  
    return (n >> (m-1)) & 1;  
}  
19.从低位到高位.将n的第m位置1
int setBitToOne(int n, int m){  
    return n | (1 << (m-1));  
    /*将1左移m-1位找到第m位，得到000...1...000 
      n在和这个数做或运算*/  
}  
20.从低位到高位,将n的第m位置0
int setBitToZero(int n, int m){  
    return n & ~(1 << (m-1));  
    /* 将1左移m

程序效率上没有实质提高的位运算技巧，一些也是位运算的常识（面试也许会遇到）

计算n+1
-~n  

计算n-1
~-n  

取相反数
~n + 1;  
另一种写法
(n ^ -1) + 1;  

if(x == a) x = b; if(x == b) x = a;
x = a ^ b ^ x;  

sign函数，参数为n，当n>0时候返回1，n<0时返回-1，n=0时返回0
return !!n - (((unsigned)n >> 31) << 1);   